<?php

namespace App\Service;

use Dompdf\Dompdf;
use Dompdf\Options;
use Symfony\Component\HttpFoundation\Response;

class PdfInvoiceService
{
    private $domPdf;

    public function __construct() {
        $pdfOptions = new Options();
        $pdfOptions->set('defaultFont', 'Helvetica');
        $pdfOptions->set('isRemoteEnabled', true);
        $pdfOptions->set('no-pdf-compression', true);  
        $this->domPdf = new DomPdf($pdfOptions);
        $this->domPdf->setPaper('A4', 'portrait');
    }

    public function downloadPDF($html) {

        $this->domPdf->loadHtml($html);
        $this->domPdf->render();
        return $this->domPdf->stream('facture.pdf', ["Attachment" => false]);

    }

    public function generatePDF($html) {
        $this->domPdf->loadHtml($html);
        $this->domPdf->render();
        return $this->domPdf->output();
    }

    public function formatTwigContent($invoice) {

        // Utilisation de la fonction avec votre tableau
        $content = $invoice->getContent();
        $newcontent = formatContent($content);

        $logo= '<svg width="817" height="182" viewBox="0 0 817 182" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M446.489 55.9276L452.909 42.2176L456.251 43.7824L449.831 57.4924L446.489 55.9276ZM480.825 55.17V43H484.515V55.17H480.825ZM390.172 56.1929C390.133 56.1076 390.052 55.9288 390.01 55.8037L393.511 54.6368C393.496 54.5904 393.483 54.5565 393.483 54.5565C393.483 54.5565 393.499 54.594 393.544 54.6946C393.602 54.8222 393.686 55.0062 393.797 55.2453C394.017 55.7225 394.334 56.4057 394.736 57.2668C395.54 58.9882 396.676 61.4127 398.034 64.305C400.751 70.0893 404.352 77.7403 407.947 85.3714C411.542 93.0024 415.13 100.613 417.819 106.315C418.913 108.634 419.858 110.638 420.594 112.199L441.179 66.6208L444.542 68.1396L420.667 121.001L418.962 117.388L420.631 116.6C418.962 117.388 418.962 117.388 418.962 117.388L417.731 114.777C416.947 113.115 415.827 110.741 414.482 107.889C411.793 102.186 408.204 94.5756 404.609 86.944C401.014 79.3126 397.412 71.6599 394.694 65.8735C393.336 62.9806 392.198 60.553 391.393 58.8275C390.99 57.9651 390.67 57.276 390.446 56.7913C390.334 56.5494 390.245 56.355 390.182 56.2141L390.172 56.1929ZM517.854 69.9572C514.709 76.1495 514.375 83.1471 514.375 86.1304V118.31H510.685V86.1304C510.685 82.9837 511.016 75.2714 514.564 68.2862C516.352 64.7659 518.978 61.3886 522.82 58.8972C526.671 56.4004 531.633 54.8654 537.97 54.8654C548.825 54.8654 555.454 58.5402 559.251 64.2328C560.755 66.4876 561.775 69.0026 562.455 71.623C562.865 70.5065 563.345 69.3873 563.904 68.2862C565.692 64.7659 568.318 61.3886 572.16 58.8972C576.011 56.4004 580.973 54.8654 587.31 54.8654C598.164 54.8654 604.794 58.5402 608.591 64.2328C612.285 69.7706 613.055 76.8786 613.055 83.2605V118.31H609.365V83.2605C609.365 77.0323 608.58 70.8653 605.521 66.2806C602.566 61.8507 597.246 58.5555 587.31 58.5555C581.592 58.5555 577.347 59.9317 574.167 61.9934C570.98 64.0604 568.752 66.8887 567.194 69.9572C564.087 76.0742 563.724 82.977 563.715 86.0198V118.31H560.025L560.025 86.1304L560.025 86.0135M560.025 86.0135V83.2605C560.025 77.0323 559.24 70.8653 556.182 66.2806C553.227 61.8507 547.906 58.5555 537.97 58.5555C532.253 58.5555 528.007 59.9317 524.828 61.9934C521.64 64.0604 519.412 66.8887 517.854 69.9572M643.044 69.9572C639.899 76.1495 639.566 83.1471 639.566 86.1304V118.31H635.876V86.1304C635.876 82.9837 636.207 75.2714 639.754 68.2862C641.542 64.7659 644.168 61.3886 648.01 58.8972C651.861 56.4004 656.823 54.8654 663.161 54.8654C674.015 54.8654 680.644 58.5402 684.442 64.2328C685.946 66.4876 686.965 69.0026 687.645 71.623C688.056 70.5065 688.535 69.3873 689.094 68.2862C690.882 64.7659 693.508 61.3886 697.35 58.8972C701.201 56.4004 706.163 54.8654 712.501 54.8654C723.355 54.8654 729.984 58.5402 733.782 64.2328C737.476 69.7706 738.245 76.8786 738.245 83.2605V118.31H734.556V83.2605C734.556 77.0323 733.77 70.8653 730.712 66.2806C727.757 61.8507 722.436 58.5555 712.501 58.5555C706.783 58.5555 702.537 59.9317 699.358 61.9934C696.17 64.0604 693.943 66.8887 692.384 69.9572C689.278 76.0742 688.914 82.977 688.906 86.0198V118.31H685.216L685.216 86.1304L685.216 86.0135M685.216 86.0135V83.2605C685.216 77.0323 684.43 70.8653 681.372 66.2806C678.417 61.8507 673.096 58.5555 663.161 58.5555C657.443 58.5555 653.198 59.9317 650.018 61.9934C646.83 64.0604 644.603 66.8887 643.044 69.9572M785.86 58.5555C771.002 58.5555 758.845 71.0579 758.845 86.6205C758.845 102.183 771.002 114.685 785.86 114.685C800.718 114.685 812.875 102.183 812.875 86.6205C812.875 71.0579 800.718 58.5555 785.86 58.5555ZM755.155 86.6205C755.155 69.1453 768.841 54.8654 785.86 54.8654C802.879 54.8654 816.565 69.1454 816.565 86.6205C816.565 104.096 802.879 118.375 785.86 118.375C768.841 118.375 755.155 104.096 755.155 86.6205ZM250.86 58.5652C235.94 58.5652 223.845 70.6602 223.845 85.5802C223.845 100.5 235.94 112.595 250.86 112.595C265.78 112.595 277.875 100.5 277.875 85.5802C277.875 70.6602 265.78 58.5652 250.86 58.5652ZM220.155 85.5802C220.155 68.6223 233.902 54.8752 250.86 54.8752C267.818 54.8752 281.565 68.6223 281.565 85.5802C281.565 86.2116 281.546 86.8385 281.508 87.4604H281.536V118.66C281.536 126.512 277.235 132.285 271.489 136.014C265.783 139.717 258.538 141.505 252.151 141.505C245.094 141.505 238.152 138.752 233.076 136.101C230.518 134.764 228.387 133.429 226.893 132.426C226.145 131.924 225.555 131.504 225.148 131.206C224.945 131.058 224.787 130.94 224.679 130.858C224.624 130.817 224.582 130.784 224.553 130.762L224.518 130.735L224.508 130.727L224.505 130.725L224.504 130.724C224.504 130.724 224.503 130.723 225.641 129.27C226.778 127.818 226.777 127.817 226.777 127.817L226.782 127.821L226.805 127.839C226.827 127.855 226.861 127.882 226.907 127.917C227 127.987 227.14 128.092 227.325 128.227C227.696 128.498 228.246 128.89 228.949 129.362C230.357 130.307 232.371 131.569 234.785 132.83C239.654 135.374 245.967 137.815 252.151 137.815C257.934 137.815 264.458 136.179 269.48 132.919C274.461 129.686 277.846 124.959 277.846 118.66V100.241C272.642 109.799 262.509 116.285 250.86 116.285C233.902 116.285 220.155 102.538 220.155 85.5802ZM301.195 65.8314C297.485 69.9425 295.835 75.3372 295.835 80.3804V118.32H292.145V80.3804C292.145 74.5836 294.035 68.2583 298.455 63.3594C302.912 58.42 309.794 55.0954 319.43 55.0954V58.7854C310.706 58.7854 304.868 61.7608 301.195 65.8314ZM343.438 61.5242C339.313 63.1952 336.067 65.3151 334.591 67.1622L331.709 64.8587C333.773 62.2758 337.717 59.8607 342.052 58.1042C346.441 56.3261 351.544 55.0954 356.15 55.0954C361.774 55.0954 367.44 56.6802 371.751 59.6961C376.095 62.7344 379.125 67.289 379.125 73.0804V98.0804C379.125 101.572 376.974 106.604 372.888 110.717C368.723 114.909 362.425 118.285 353.93 118.285C337.196 118.285 330.195 107.552 330.195 101.86V97.8604C330.195 95.818 331.29 92.304 334.129 89.3046C337.045 86.224 341.744 83.7354 348.85 83.7354H375.435V73.0804C375.435 68.7319 373.205 65.2165 369.636 62.7197C366.035 60.2007 361.136 58.7854 356.15 58.7854C352.136 58.7854 347.509 59.8747 343.438 61.5242ZM375.435 87.4254H348.85C342.686 87.4254 338.98 89.5469 336.809 91.8412C334.56 94.2168 333.885 96.8429 333.885 97.8604V101.86C333.885 105.109 338.804 114.595 353.93 114.595C361.366 114.595 366.742 111.667 370.27 108.116C373.876 104.487 375.435 100.339 375.435 98.0804V87.4254ZM480.825 118.31V67.1104H484.515V118.31H480.825Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M91 182C141.258 182 182 141.258 182 91C182 82.4275 180.815 74.1318 178.599 66.268C174.601 65.4182 169.194 65.2177 161.5 66.5C147.1 68.9 136.833 87.3333 135.5 95.5V69C135.5 58.0183 152.613 48.8515 169.287 44.5805C153.426 17.8884 124.302 0 91 0C72.0265 0 54.4093 5.80669 39.8284 15.7399C48.1266 11.1702 57.0981 8.66144 65.4961 8.49994C91.4961 7.99994 128.996 23.4999 128.996 71.9999C128.996 94.7013 128.943 105.791 128.911 112.397V112.4C128.874 119.904 128.866 121.619 128.996 128C129.467 151.056 117.099 178.54 83.5534 181.7C86.0093 181.899 88.4928 182 91 182ZM134.5 164H123C131 156 134 144.333 134.5 139.5V164Z" fill="black"/>
        <path d="M32.1155 160.383C33.1044 160.701 33.9216 160.918 34.4962 161C35.174 161.097 36.3769 161.344 37.9924 161.675C44.7182 163.055 58.5948 165.903 71.4962 165.5C87.4962 165 108.996 154 108.996 128V82.5C108.996 52 100.504 29.5 67.5 29.5C43.5 29.5 29.9962 50.5 29.9962 68.9999C29.9962 87.4999 45.496 110 69.4961 109C84.8814 108.359 91.2415 102.818 96.4303 98.2973C97.8193 97.0872 99.1243 95.9502 100.496 94.9999V116.5C94 121.5 82 129.277 69.4961 129.5C41.5 130 8 110.5 8 68.9999C8 58.9495 10.3238 49.9321 14.2299 42.1182C5.22076 56.2378 0 73.0092 0 91C0 118.801 12.4671 143.691 32.1155 160.383Z" fill="black"/>
        </svg>';

        $logo1= '<svg width="182" height="182" viewBox="0 0 182 182" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M91 182C141.258 182 182 141.258 182 91C182 82.4275 180.815 74.1318 178.599 66.268C174.601 65.4182 169.194 65.2177 161.5 66.5C147.1 68.9 136.833 87.3333 135.5 95.5V69C135.5 58.0183 152.613 48.8515 169.287 44.5805C153.426 17.8884 124.302 0 91 0C72.0265 0 54.4093 5.80669 39.8284 15.7399C48.1266 11.1702 57.0981 8.66144 65.4961 8.49994C91.4961 7.99994 128.996 23.4999 128.996 71.9999C128.996 94.7013 128.943 105.791 128.911 112.397V112.4C128.874 119.904 128.866 121.619 128.996 128C129.467 151.056 117.099 178.54 83.5534 181.7C86.0093 181.899 88.4928 182 91 182ZM134.5 164H123C131 156 134 144.333 134.5 139.5V164Z" fill="black"/>
        <path d="M32.1155 160.383C33.1044 160.701 33.9216 160.918 34.4962 161C35.174 161.097 36.3769 161.344 37.9924 161.675C44.7182 163.055 58.5948 165.903 71.4962 165.5C87.4962 165 108.996 154 108.996 128V82.5C108.996 52 100.504 29.5 67.5 29.5C43.5 29.5 29.9962 50.5 29.9962 68.9999C29.9962 87.4999 45.496 110 69.4961 109C84.8814 108.359 91.2415 102.818 96.4303 98.2973C97.8193 97.0872 99.1243 95.9502 100.496 94.9999V116.5C94 121.5 82 129.277 69.4961 129.5C41.5 130 8 110.5 8 68.9999C8 58.9495 10.3238 49.9321 14.2299 42.1182C5.22076 56.2378 0 73.0092 0 91C0 118.801 12.4671 143.691 32.1155 160.383Z" fill="black"/>
        </svg>';


        $logo2= '<svg width="100%" viewBox="0 0 597 100" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M5.64062 87.2704C5.64062 87.2704 18.9106 97.6604 32.1506 97.6604C44.3206 97.6604 59.6906 90.8104 59.6906 76.6604V45.4604M73.9902 76.3204V38.3804C73.9902 27.5404 81.0702 14.9404 99.4302 14.9404M113.15 24.0104C116.69 19.5804 127.53 14.9404 136.15 14.9404C146.76 14.9404 157.28 20.9404 157.28 31.0804V56.0804C157.28 61.8304 149.86 74.4404 133.93 74.4404C118 74.4404 112.04 64.3304 112.04 59.8604V55.8604C112.04 52.8004 115.58 43.5804 128.85 43.5804H157.28M171.761 13.2202C171.981 13.8802 200.631 74.6002 200.631 74.6002L222.861 25.3802M262.67 1V13.17M262.67 25.1104V76.3103M292.53 76.3104V44.1304C292.53 38.0004 293.86 14.7104 317.97 14.7104C338.76 14.7104 341.87 28.6505 341.87 41.2605V76.3104L341.87 44.1304C341.87 38.0004 343.2 14.7104 367.31 14.7104C388.1 14.7104 391.21 28.6505 391.21 41.2605V76.3104M417.721 76.3104V44.1304C417.721 38.0004 419.051 14.7104 443.161 14.7104C463.951 14.7104 467.061 28.6505 467.061 41.2605V76.3104L467.061 44.1304C467.061 38.0004 468.391 14.7104 492.501 14.7104C513.291 14.7104 516.401 28.6505 516.401 41.2605V76.3104M234.58 1L228.16 14.71M59.72 43.5802C59.72 59.5192 46.7989 72.4402 30.86 72.4402C14.9211 72.4402 2 59.5192 2 43.5802C2 27.6413 14.9211 14.7202 30.86 14.7202C46.7989 14.7202 59.72 27.6413 59.72 43.5802ZM594.72 44.6205C594.72 61.1393 581.799 74.5304 565.86 74.5304C549.921 74.5304 537 61.1393 537 44.6205C537 28.1016 549.921 14.7104 565.86 14.7104C581.799 14.7104 594.72 28.1016 594.72 44.6205Z" stroke="black" stroke-width="4" stroke-miterlimit="10"/>
        </svg>';

        $datas = [
            'logo1' => base64_encode($logo1),
            'logo2' => base64_encode($logo2),
            'chrono'    => $invoice->getChrono(),
            'contents'    => $newcontent,
            'tva' => $invoice->getTva(),
            'amountHT' => $invoice->getAmountHT(),
            'amountTTC' => $invoice->getAmountTTC(),
            'date' => $invoice->getCreatedAt()->format('d/m/Y'),
        ];

        if ($invoice->getCommand()) {
            $datas['details'] = $invoice->getCommand()->getDetails();
        }

        if ($invoice->getTrustee()) {
            $datas['trustee'] = $invoice->getTrustee()->getTitle();
            $datas['trusteeRef'] = $invoice->getTrustee()->getReference();
            $datas['address'] = $invoice->getTrustee()->getAddress();
            $datas['postcode'] = $invoice->getTrustee()->getPostcode();
            $datas['city'] = $invoice->getTrustee()->getCity();
        }

        if ($invoice->getCustomer()) {
            $datas['customer'] = $invoice->getCustomer()->getTitle();
            $datas['customerRef'] = $invoice->getCustomer()->getReference();
            $datas['address'] = $invoice->getCustomer()->getAddress();
            $datas['postcode'] = $invoice->getCustomer()->getPostcode();
            $datas['city'] = $invoice->getCustomer()->getCity();
        }

        if ($invoice->getProperty()) {
            $datas['property'] = $invoice->getProperty()->getTitle();
            $datas['propertydetails'] = $invoice->getProperty()->getTitle()." - ".$invoice->getProperty()->getAddress()." ".$invoice->getProperty()->getPostcode()." ".$invoice->getProperty()->getCity()  ;
        }

        if ($invoice->getRefundReference()) {
            $datas['refundReference'] = $invoice->getRefundReference();
        }

        return $datas;

    }


}

function formatContent($content)
{

    $computedcontent = [];
    $servicesLine = [];


    foreach ($content as $line) {

        // Vérifie si le type est service
        if ($line['type'] === "service") {

            //si $servicesLine est empty
            if (empty($servicesLine)) {
                $servicesLine = [
                    "type" => "service",
                    "title" => "",
                    "price" => $line['price'],
                    "amount" => $line['amount'],
                    "quantity" => $line['quantity'],
                    "occupant" => $line['occupant'],
                    "reference" => $line['reference'],
                ];

                if ($line['invoiceTitle']) {
                    $servicesLine['title'] = $line['invoiceTitle'];
                }
            }
            //sinon concat
            else {
                if ($line['invoiceTitle']) {
                    $servicesLine['title'] =  $servicesLine['title'] . " - " . $line['invoiceTitle'];
                }
                $servicesLine['reference'] =  $servicesLine['reference'] . $line['reference'];
                $servicesLine['price'] =  $servicesLine['price'] + $line['price'];
                $servicesLine['amount'] =  $servicesLine['amount'] + $line['amount'];
            }
        }

        if ($line['type'] === "extraService") {
            array_push($computedcontent, $line);
        }

        if ($line['type'] === "customService") {

            if (!isValueInArray($line['occupant'], $computedcontent)) {
                $customLine = [
                    "type" => "customService",
                    "title" => $line['invoiceTitle'] !== "" && $line['invoiceTitle'] !== null ? $line['invoiceTitle'] : "",
                    "proprietaire" => $line['proprietaire'] ? $line['proprietaire'] : "",
                    "title" =>  $line['invoiceTitle'],
                    "price" => $line['price'],
                    "amount" => $line['amount'],
                    "quantity" => $line['quantity'],
                    "occupant" => $line['occupant'],
                    "reference" => $line['reference'],
                ];
                array_unshift($computedcontent, $customLine);
            } else {
                $index = findIndexInArray($computedcontent, $line['occupant']);
                $computedcontent[$index]['reference'] =  $computedcontent[$index]['reference'] . $line['reference'];
                if ($line['invoiceTitle']) {
                    $computedcontent[$index]['title'] =  $computedcontent[$index]['title'] . " - " . $line['invoiceTitle'];
                }
                $computedcontent[$index]['price'] =  $computedcontent[$index]['price'] + $line['price'];
                $computedcontent[$index]['amount'] =  $computedcontent[$index]['amount'] + $line['amount'];
            }
        }
    }


    if (!empty($servicesLine)) {
        array_unshift($computedcontent, $servicesLine);
    } 

    return ($computedcontent);
}

function isValueInArray($value, $array)
{
    foreach ($array as $line) { 
        if (in_array($value, $line)) return true;
    }
    return false;
}

function findIndexInArray($tableaux, $valueToFind)
{
    foreach ($tableaux as $index => $tableau) {
        // Vérifier si la valeur est présente dans le tableau
        if (in_array($valueToFind, $tableau)) {
            return $index;
        }
    }
}
